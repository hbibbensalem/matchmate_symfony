<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1">
  <link rel="shortcut icon" href="{{ asset('front/images/cree-un-logo-pour-un-site-web-de-sport-raquettes-sur-le-nom-matchmate-removebg-preview-1-260x147.png') }}" type="image/x-icon">
  <title>Ajouter Événement - MatchMate</title>
  <link rel="stylesheet" href="{{ asset('front/bootstrap/css/bootstrap.min.css') }}">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  
  <style>
    :root {
      --primary-color: #10888D;
      --primary-hover: #0E777D;
      --secondary-color: #2C3E50;
      --light-bg: #F8FAFC;
      --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.08);
      --error-color: #dc3545;
    }
    
    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--light-bg);
    }
    
    .event-header {
      background: linear-gradient(135deg, var(--primary-color), #15A1A8);
      padding: 3rem 0;
      margin-bottom: 3rem;
      color: white;
    }
    
    .event-card {
      border-radius: 12px;
      box-shadow: var(--card-shadow);
      border: none;
      overflow: hidden;
      transition: transform 0.3s ease;
    }
    
    #mapContainer {
    height: 400px;
    border-radius: 8px;
    margin: 1rem 0;
    border: 2px solid #dee2e6;
}

.leaflet-container {
    font-family: inherit;
}

.map-tooltip {
    padding: 0.5rem;
    background: white;
    border-radius: 4px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.1);
}
    .form-control {
      border-radius: 8px;
      padding: 12px 15px;
      border: 2px solid #e9ecef;
      transition: all 0.3s;
    }
    
    .form-control.is-invalid {
      border-color: var(--error-color);
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 12' width='12' height='12' fill='none' stroke='%23dc3545'%3e%3ccircle cx='6' cy='6' r='4.5'/%3e%3cpath stroke-linejoin='round' d='M5.8 3.6h.4L6 6.5z'/%3e%3ccircle cx='6' cy='8.2' r='.6' fill='%23dc3545' stroke='none'/%3e%3c/svg%3e");
      background-repeat: no-repeat;
      background-position: right calc(0.375em + 0.1875rem) center;
      background-size: calc(0.75em + 0.375rem) calc(0.75em + 0.375rem);
    }
    
    .form-control:focus {
      border-color: var(--primary-color);
      box-shadow: 0 0 0 3px rgba(16, 136, 141, 0.2);
    }
    
    .invalid-feedback {
      color: var(--error-color);
      font-size: 0.875em;
      margin-top: 0.25rem;
      display: block;
    }
    
    .btn-primary {
      background-color: var(--primary-color);
      border: none;
      padding: 10px 20px;
      border-radius: 8px;
      font-weight: 500;
    }
    
    .btn-primary:hover {
      background-color: var(--primary-hover);
    }
    
    .image-preview {
      width: 100%;
      height: 250px;
      object-fit: contain;
      border-radius: 8px;
      margin-bottom: 1rem;
      border: 2px dashed #ddd;
      padding: 10px;
      background-color: #f9f9f9;
    }
    
    .datetime-picker {
      position: relative;
    }
    
    .datetime-picker .fa-calendar {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--primary-color);
      pointer-events: none;
    }
    
    .url-input-container {
      position: relative;
    }
    
    .url-input-container .fa-link {
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: var(--primary-color);
      pointer-events: none;
    }
    
    .url-input-container input {
      padding-left: 40px;
    }
    
    .form-label {
      font-weight: 500;
      margin-bottom: 0.5rem;
    }
    
    .alert {
      border-radius: 8px;
    }
    
    @media (max-width: 768px) {
      .image-preview {
        height: 200px;
      }
    }
  </style>
</head>
<body>

  <!-- Header Section -->
  <div class="event-header text-center">
    <div class="container">
      <h1 class="display-4 fw-bold">Ajouter un Événement</h1>
      <p class="lead">Créez un nouveau événement sportif</p>
    </div>
  </div>

  <!-- Main Content -->
  <div class="container mb-5">
    <div class="row justify-content-center">
      <div class="col-lg-10">
        <!-- Flash Messages -->
        {% for message in app.flashes('success') %}
          <div class="alert alert-success alert-dismissible fade show" role="alert">
              <i class="fas fa-check-circle me-2"></i>{{ message }}
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        {% endfor %}
        
        {% for message in app.flashes('error') %}
          <div class="alert alert-danger alert-dismissible fade show" role="alert">
              <i class="fas fa-exclamation-circle me-2"></i>{{ message }}
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
          </div>
        {% endfor %}

        <!-- Event Form Card -->
        <div class="card event-card mb-4">
          <div class="card-header bg-white">
            <h3 class="mb-0"><i class="fas fa-calendar-plus me-2"></i>Nouvel Événement</h3>
          </div>
          <div class="card-body">
            {{ form_start(form, {
              'attr': {
                'class': 'row g-3 needs-validation',
                'novalidate': 'novalidate',
                'id': 'event-form'
              }
            }) }}
            
              <div class="col-md-6">
                {{ form_label(form.titre, 'Titre de l\'événement*') }}
                {{ form_widget(form.titre, {
                  'attr': {
                    'class': 'form-control' ~ (form.titre.vars.valid ? '' : ' is-invalid'),
                    'placeholder': 'Ex: Tournoi de Tennis',
                    'pattern': '[^<>]*',
                    'title': 'Les balises HTML ne sont pas autorisées'
                  }
                }) }}
                <div class="invalid-feedback">
                  {{ form_errors(form.titre)|striptags }}
                </div>
                <small class="form-text text-muted">50 caractères minimum, sans balises HTML</small>
              </div>
              

              <div class="col-md-6">
    {{ form_label(form.lieu, 'Lieu*') }}
    <div class="input-group">
        {{ form_widget(form.lieu, {
            'attr': {
                'class': 'form-control' ~ (form.lieu.vars.valid ? '' : ' is-invalid'),
                'id': 'event_lieu',
                'readonly': 'readonly',
                'placeholder': 'Cliquez sur la carte pour sélectionner'
            }
        }) }}
        <button type="button" class="btn btn-outline-secondary" id="openMapBtn">
            <i class="fas fa-map-marker-alt"></i>
        </button>
    </div>
    <div class="invalid-feedback">
        {{ form_errors(form.lieu)|striptags }}
    </div>
    <small class="form-text text-muted">Cliquez sur l'icône de carte pour sélectionner le lieu</small>
    <div id="mapContainer" class="d-none mt-2"></div>
</div>
              

              <div class="col-md-6 datetime-picker">
                {{ form_label(form.date, 'Date et Heure*') }}
                {{ form_widget(form.date, {
                  'attr': {
                    'class': 'form-control' ~ (form.date.vars.valid ? '' : ' is-invalid'),
                    'min': 'now'|date('Y-m-d\\TH:i')
                  }
                }) }}
                <i class="fas fa-calendar"></i>
                <div class="invalid-feedback">
                  {{ form_errors(form.date)|striptags }}
                </div>
              </div>
              

              <div class="col-md-6">
                {{ form_label(form.capacite, 'Capacité maximale*') }}
                {{ form_widget(form.capacite, {
                  'attr': {
                    'class': 'form-control' ~ (form.capacite.vars.valid ? '' : ' is-invalid'),
                    'min': '1',
                    'max': '1000'
                  }
                }) }}
                <div class="invalid-feedback">
                  {{ form_errors(form.capacite)|striptags }}
                </div>
                <small class="form-text text-muted">Nombre entre 1 et 1000</small>
              </div>
              

              <div class="col-12">
                {{ form_label(form.description) }}
                <div class="input-group">
                    {{ form_widget(form.description, {'attr': {'class': 'form-control'}}) }}
                    <button type="button" 
                            class="btn btn-outline-secondary" 
                            disabled
                            data-bs-toggle="tooltip" 
                            title="Fonctionnalité en cours de développement - Disponible prochainement!">
                        <i class="fas fa-robot me-2"></i>Générer avec AI
                    </button>
                </div>
                <small class="text-muted mt-1 d-block">
                    <i class="fas fa-info-circle me-1"></i>
                    La génération automatique via AI sera disponible dans la prochaine mise à jour
                </small>
            </div>
              

              <div class="col-12">
                {{ form_label(form.image_url, 'URL de l\'image*') }}
                <div class="url-input-container">
                  <i class="fas fa-link"></i>
                  {{ form_widget(form.image_url, {
                    'attr': {
                      'class': 'form-control' ~ (form.image_url.vars.valid ? '' : ' is-invalid'),
                      'placeholder': 'https://example.com/image.jpg',
                      'pattern': 'https?://.+\.(jpeg|jpg|gif|png)$',
                      'title': 'URL doit commencer par http:// ou https:// et pointer vers une image'
                    }
                  }) }}
                </div>
                <div class="invalid-feedback">
                  {{ form_errors(form.image_url)|striptags }}
                </div>
                <small class="form-text text-muted">Format: http://example.com/image.jpg</small>
                
                <div class="image-preview-container text-center mt-3">
                  <img id="imagePreview" class="image-preview" 
                       src="" 
                       alt="Aperçu de l'image"
                       style="display: none;">
                  <div id="noPreview" class="text-muted py-4" style="display: block;">
                    <i class="fas fa-image fa-3x mb-3"></i>
                    <p>Aperçu de l'image apparaîtra ici</p>
                  </div>
                </div>
              </div>
              

              <div class="col-12 mt-4">
                <button type="submit" class="btn btn-primary px-4">
                  <i class="fas fa-save me-2"></i>Créer l'événement
                </button>
                <a href="{{ path('app_dashboard_event') }}" class="btn btn-outline-secondary ms-2">
                  <i class="fas fa-times me-2"></i>Annuler
                </a>
              </div>
              

            {{ form_end(form) }}
          </div>
        </div>
      </div>
    </div>
  </div>
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    const mapContainer = document.getElementById('mapContainer');
    const lieuInput = document.getElementById('event_lieu');
    let map = null;
    let marker = null;

    document.getElementById('openMapBtn').addEventListener('click', function() {
        mapContainer.classList.toggle('d-none');
        
        if (!map) {
            // Initialiser la carte
            map = L.map('mapContainer').setView([36.8065, 10.1815], 13);
            
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '© OpenStreetMap contributors'
            }).addTo(map);

            // Gestionnaire de clic sur la carte
            map.on('click', async function(e) {
                if (marker) map.removeLayer(marker);
                
                marker = L.marker(e.latlng)
                    .addTo(map)
                    .bindPopup("<div class='map-tooltip'>Chargement de l'adresse...</div>")
                    .openPopup();

                try {
                    const response = await fetch(
                        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${e.latlng.lat}&lon=${e.latlng.lng}&accept-language=fr`
                    );
                    const data = await response.json();
                    
                    let address = '';
                    if (data.address) {
                        address = [
                            data.address.road,
                            data.address.house_number,
                            data.address.postcode,
                            data.address.city || data.address.town || data.address.village
                        ].filter(Boolean).join(', ');
                    }
                    
                    lieuInput.value = address || 'Adresse non trouvée';
                    marker.setPopupContent(`<div class='map-tooltip'>${address || 'Adresse non trouvée'}</div>`);
                } catch (error) {
                    console.error('Erreur de géocodage:', error);
                    lieuInput.value = 'Erreur de localisation';
                    marker.setPopupContent("<div class='map-tooltip'>Erreur de localisation</div>");
                }
            });
        }
    });

    // Ajouter un événement pour fermer la carte
    document.addEventListener('click', function(event) {
        if (!mapContainer.contains(event.target) && event.target.id !== 'openMapBtn') {
            mapContainer.classList.add('d-none');
            if (marker) {
                map.removeLayer(marker);
                marker = null; // Réinitialiser le marqueur
            }
        }
    });

    // Image URL preview
    const imageUrlInput = document.querySelector('#{{ form.image_url.vars.id }}');
    const imagePreview = document.getElementById('imagePreview');
    const noPreview = document.getElementById('noPreview');
    
    if (imageUrlInput) {
        imageUrlInput.addEventListener('input', function() {
            if (this.value && this.checkValidity()) {
                imagePreview.src = this.value;
                imagePreview.style.display = 'block';
                noPreview.style.display = 'none';

                // Vérifier si l'image est valide
                const testImg = new Image();
                testImg.src = this.value;

                testImg.onload = function() {
                    imagePreview.src = this.src;
                    noPreview.style.display = 'none';
                };

                testImg.onerror = function() {
                    imagePreview.style.display = 'none';
                    noPreview.style.display = 'block';
                    noPreview.innerHTML = `
                        <i class="fas fa-exclamation-triangle fa-3x mb-3 text-danger"></i>
                        <p class="text-danger">Impossible de charger l'image</p>
                        <p class="small text-muted">Vérifiez que l'URL est correcte</p>
                    `;
                };
            } else {
                imagePreview.style.display = 'none';
                noPreview.style.display = 'block';
                noPreview.innerHTML = `
                    <i class="fas fa-image fa-3x mb-3"></i>
                    <p>Aperçu de l'image apparaîtra ici</p>
                `;
            }
        });

        // Déclencher l'événement input si une valeur existe déjà
        if (imageUrlInput.value) {
            imageUrlInput.dispatchEvent(new Event('input'));
        }
    }

    // Static description generation
    const generateDescriptionButton = document.querySelector('.btn-outline-secondary[data-bs-toggle="tooltip"]');
    const descriptionField = document.querySelector('#{{ form.description.vars.id }}');
    const titleField = document.querySelector('#{{ form.titre.vars.id }}');
    const locationField = document.querySelector('#{{ form.lieu.vars.id }}');
    const dateField = document.querySelector('#{{ form.date.vars.id }}');
    const capacityField = document.querySelector('#{{ form.capacite.vars.id }}');

    generateDescriptionButton.addEventListener('click', function() {
        const title = titleField.value || 'un événement sportif';
        const location = locationField.value || 'un lieu à découvrir';
        const date = dateField.value || 'une date à venir';
        const capacity = capacityField.value || 'un nombre limité de participants';

        const description = `
            Rejoignez-nous pour ${title}, un événement exceptionnel qui se tiendra à ${location} le ${date}. 
            Cet événement est une occasion unique pour les passionnés de sports de raquettes de se réunir, 
            d'échanger des idées et de partager leur amour pour ce sport captivant. Que vous soyez un joueur expérimenté 
            ou un débutant curieux, cet événement est conçu pour offrir une expérience enrichissante à tous.

            Avec une capacité maximale de ${capacity}, cet événement promet une ambiance conviviale et dynamique, 
            où chaque participant pourra se sentir impliqué. Vous aurez l'opportunité de rencontrer d'autres amateurs, 
            de participer à des activités passionnantes et de découvrir de nouvelles techniques pour améliorer votre jeu.

            Ne manquez pas cette chance de vivre une journée mémorable dédiée aux sports de raquettes. 
            Réservez votre place dès maintenant et préparez-vous à plonger dans un univers de compétition amicale, 
            de camaraderie et de passion pour le sport. Nous avons hâte de vous accueillir et de partager avec vous 
            cette expérience inoubliable !
        `;

        descriptionField.value = description.trim();
    });

    // Enable the button and update its tooltip
    generateDescriptionButton.disabled = false;
    generateDescriptionButton.setAttribute('title', 'Cliquez pour générer une description statique');
});
</script>
<script src="{{ asset('front/bootstrap/js/bootstrap.bundle.min.js') }}"></script>
</body>
</html>